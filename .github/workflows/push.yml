name: Build and Test
on: [push]

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13]
    name: ${{ matrix.os == 'ubuntu-latest' && 'linux-x86_64' || matrix.os == 'macos-13' && 'macos-x86_64' || 'windows-x86_64' }}
    env:
      plat: ${{ matrix.os == 'ubuntu-latest' && 'linux-x86_64' || matrix.os == 'macos-13' && 'macos-x86_64' || 'windows-x86_64' }}


    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - uses: korandoru/setup-zig@v1
        name: Install zig
        if: matrix.os == 'ubuntu-latest'
        with:
          zig-version: 0.12.0
      - uses: extractions/setup-just@v2
        name: Install just
        if: matrix.os == 'ubuntu-latest'
      - uses: laytan/setup-odin@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          release: dev-2024-06
      - uses: ilammy/msvc-dev-cmd@v1
        if: matrix.os == 'windows-latest'
      - uses: crazy-max/ghaction-chocolatey@v3
        name: Install wget, 7zip, just, zig
        if: matrix.os == 'windows-latest'
        with:
          args: install wget 7zip just zig
      - name: Install glew, glfw
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt install libglew-dev libglfw3-dev
      - name: Install just, glew, zig
        if: matrix.os == 'macos-13'
        run: brew install just glew zig

      - name: Test
        uses: nick-fields/retry@v3
        with:
          command: just test
          timeout_minutes: 2
          retry_wait_seconds: 1
          max_attempts: 5

      - name: example/olivec
        run: just example olivec
      - name: example/glew
        run: just example glew

      - name: Build runic release
        run: just
        if: matrix.os != 'windows-latest'
      - name: Build runic release
        run: .\build.cmd
        if: matrix.os == 'windows-latest'

      - uses: actions/upload-artifact@v4
        if: matrix.os != 'windows-latest'
        with:
          name: runic-${{ env.plat }}
          path: ${{ github.workspace }}/build/runic
          if-no-files-found: warn
          overwrite: true
          compression-level: 0
      - uses: actions/upload-artifact@v4
        if: matrix.os == 'windows-latest'
        with:
          name: runic-${{ env.plat }}
          path: ${{ github.workspace }}/build/runic.exe
          if-no-files-found: warn
          overwrite: true
          compression-level: 0

  create-release:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: artifacts
      - name: List all artifacts
        run: ls -la --color=always artifacts
      - uses: ncipollo/release-action@v1
        with:
          artifacts: 'artifacts/*'
          body: |
            Automatically generated by Github Actions Run ${{ github.run_id }}
          generateReleaseNotes: true
          makeLatest: true