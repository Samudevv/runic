set windows-shell := ['powershell.exe']

BUILD_DIR := justfile_directory() / '..' / '..' / 'build'
ODIN_ROOT := if os_family() == 'unix' { shell('dirname ' + shell('which odin')) } else { env('ODIN_ROOT') }
MAKE := if os() == 'linux' {'make'} else {'gmake'}

example: run-headless

run: build
  {{ BUILD_DIR / 'tiled_example' }}
run-headless: build
  {{ BUILD_DIR / 'tiled_example' }} --headless

[linux]
build: bindings tiled stb_image
  cc --std=c99 -Wall -Wextra -Werror -O3 -o "{{ BUILD_DIR / 'tiled_example' }}" 'tiled_example.c' -L"{{ BUILD_DIR }}" -L"{{ ODIN_ROOT / 'vendor' / 'stb' / 'lib' }}" -ltiled -lSDL2 -lSDL2_image -l:stb_image.a -lm

[windows]
build: bindings tiled sdl2-headers
  cl /std:c11 /utf-8 /O2 /Fe"{{ BUILD_DIR / 'tiled_example.exe' }}" /I"{{ BUILD_DIR }}" 'tiled_example.c' /link /LIBPATH:"{{ BUILD_DIR }}" /LIBPATH:"{{ ODIN_ROOT / 'vendor' / 'stb' / 'lib' }}" /LIBPATH:"{{ ODIN_ROOT / 'vendor' / 'sdl2' }}" /LIBPATH:"{{ ODIN_ROOT / 'vendor' / 'sdl2' / 'image' }}" tiled.lib SDL2.lib SDL2_image.lib stb_image.lib

[windows]
sdl2-headers:
  #! pwsh.exe

  $SDL2_URL = "https://github.com/libsdl-org/SDL/releases/download/release-2.32.8/SDL2-devel-2.32.8-VC.zip"
  $SDL2_image_URL = "https://github.com/libsdl-org/SDL_image/releases/download/release-2.8.8/SDL2_image-devel-2.8.8-VC.zip"
  $SDL2_ZIP = "{{ BUILD_DIR / 'SDL2.zip' }}"
  $SDL2_image_ZIP = "{{ BUILD_DIR / 'SDL2_image.zip' }}"

  if (!(Test-Path $SDL2_ZIP)) {
  	Invoke-WebRequest -Uri $SDL2_URL -OutFile $SDL2_ZIP
  }
  if (!(Test-Path $SDL2_image_ZIP)) {
  	Invoke-WebRequest -Uri $SDL2_image_URL -OutFile $SDL2_image_ZIP
  }

  if (!(Test-Path "{{ BUILD_DIR / 'SDL2' / 'SDL.h' }}")) {
  	Expand-Archive -Path $SDL2_ZIP -DestinationPath "{{ BUILD_DIR / 'SDL2' }}" -Force
  	Move-Item -Path "{{ BUILD_DIR / 'SDL2' / 'SDL2-2.32.8' / 'include' / '*' }}" -Destination "{{ BUILD_DIR / 'SDL2' }}"
  }
  if (!(Test-Path "{{ BUILD_DIR / 'SDL2' / 'SDL_image.h' }}")) {
  	Expand-Archive -Path $SDL2_image_ZIP -DestinationPath "{{ BUILD_DIR / 'SDL2_image' }}" -Force
  	Move-Item -Path "{{ BUILD_DIR / 'SDL2_image' / 'SDL2_image-2.8.8' / 'include' / '*' }}" -Destination "{{ BUILD_DIR / 'SDL2' }}"
  }

  Copy-Item -Path "{{ ODIN_ROOT / 'vendor' / 'sdl2' / 'SDL2.dll' }}" -Destination "{{ BUILD_DIR / 'SDL2.dll' }}"
  Copy-Item -Path "{{ ODIN_ROOT / 'vendor' / 'sdl2' / 'image' / 'SDL2_image.dll' }}" -Destination "{{ BUILD_DIR / 'SDL2_image.dll' }}"
  Copy-Item -Path "{{ ODIN_ROOT / 'vendor' / 'sdl2' / 'image' / 'libpng16-16.dll' }}" -Destination "{{ BUILD_DIR / 'libpng16-16.dll' }}"
  Copy-Item -Path "{{ ODIN_ROOT / 'vendor' / 'sdl2' / 'image' / 'zlib1.dll' }}" -Destination "{{ BUILD_DIR / 'zlib1.dll' }}"

STDOUT_TO := if os_family() == 'unix' {
  '>'
} else {
  '| Set-Content -Encoding String -Path'
}

bindings:
  {{ BUILD_DIR / 'runic_debug' }}

[unix]
tiled:
  odin build tiled.odin -file -build-mode:obj -reloc-mode:pic -out:"{{ BUILD_DIR / 'tiled.o' }}" -vet -warnings-as-errors -debug -use-single-module -no-entry-point
  ar r "{{ BUILD_DIR / 'libtiled.a' }}"  "{{ BUILD_DIR / 'tiled.o' }}"

[windows]
tiled:
  odin build tiled.odin -file -build-mode:obj -reloc-mode:pic -out:"{{ BUILD_DIR / 'tiled.obj' }}" -vet -warnings-as-errors -debug -use-single-module -no-entry-point
  lib /out:"{{ BUILD_DIR / 'tiled.lib' }}" "{{ BUILD_DIR / 'tiled.obj' }}"

STBIMAGE_MAKE := if os_family() == 'unix' {
if os() != 'macos' {
  MAKE + ' -C ' + '"' + ODIN_ROOT / 'vendor' / 'stb' / 'src' + '"'
} else {
  'echo Nothing do to for MacOS'
}
} else { 'echo Nothing to do for Windows' }
[unix]
stb_image:
  #! /bin/sh
  set -ex
  if [ ! -e "{{ ODIN_ROOT }}/vendor/stb/lib/stb_image.a" ]; then
    {{ STBIMAGE_MAKE }}
  fi

[windows]
stb_image:

[unix]
clean:
  rm -rf tiled/ "{{ BUILD_DIR / 'libtiled.a' }}" "{{ BUILD_DIR / 'tiled.o' }}"

[windows]
clean:
  if (Test-Path -Path tiled) { Remove-Item -Path tiled -Recurse -Force -ErrorAction SilentlyContinue }
  if (Test-Path -Path "{{ BUILD_DIR / 'tiled.lib' }}") { Remove-Item -Path "{{ BUILD_DIR / 'tiled.lib' }}" -Force -ErrorAction SilentlyContinue }
  if (Test-Path -Path "{{ BUILD_DIR / 'tiled.obj' }}") { Remove-Item -Path "{{ BUILD_DIR / 'tiled.obj' }}" -Force -ErrorAction SilentlyContinue }
